#!/bin/bash

# git branch-list/bl [save|drop|#id]

# database=
# if -f .git then database= .git/info/git-branch-list
DATABASE=.git/info/git-branch-list

function initialise_database () {
	if [ -d .git ]; then
		touch "$DATABASE"
	fi
}

function save_branch () {
	local branch=$(branch_or_current_branch "$1")

# 	sed -i '.bak' "0i\\
# $branch
# " "$DATABASE"
#
# 	rm "${DATABASE}.bak"

# 	# echo "$branch" >> "$DATABASE"

	if fgrep "$branch" "$DATABASE" > /dev/null; then
		return 1
	fi

	cat <(echo "$branch") "$DATABASE" > "${DATABASE}.bak"
	mv "${DATABASE}.bak" "$DATABASE"

	# TODO: append instead of prepend so IDs stay the same. Maybe?
}

function drop_branch () {
	local branch=$(branch_or_current_branch "$1")

	# Assume `$branch` is an ID if it's not a branch name
	if ! is_a_branch "$branch"; then
		branch=$(branch_by_id "$branch")
	fi

	sed -i '.bak' "/$branch/d" "$DATABASE"
	rm "${DATABASE}.bak"
}

function list_branches () {
	nl "$DATABASE"
}

function checkout_branch () {
	local id="$1"
	local branch=$(branch_by_id "$id")

	if [ "$branch" = '' ]; then
		echo 'branch-list: Invalid checkout ID' 1>&2
		return 1
	fi

	git checkout "$branch"
}

function branch_or_current_branch () {
	local branch="$1"

	if [ "$branch" = '' ]; then
		git rev-parse --abbrev-ref HEAD
	else
		echo "$branch"
	fi
}

function is_a_branch () {
	local branch="$1"

	git rev-parse --verify "$branch" > /dev/null 2>&1
	return $?
}

function branch_by_id () {
	local id="$1"

	local branch=$(list_branches |
		tr -d ' ' |
		fgrep "$id	" |
		cut -d '	' -f 2)

	echo "$branch"
}

command="$1"

initialise_database

case "$command" in
	save)
		save_branch "$2"
		;;
	drop)
		drop_branch "$2"
		;;
	"")
		list_branches

		exit $?
		;;
	*)
		# If `$1` is an integer
		if [ "$1" -eq "$1" ] 2>/dev/null; then
			checkout_branch "$1"
		else
			exit 1
		fi

		;;
esac
