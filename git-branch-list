#!/bin/bash

# git-branch-list
# Maintains a list of Git branches that can be checked out quickly.

# Copyright (c) 2018  Teddy Wing
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

GIT_ROOT=$(git rev-parse --show-toplevel)
DATABASE="${GIT_ROOT}/.git/info/git-branch-list"
VERSION=0.1.1

function initialise_database () {
	if [ -d .git ]; then
		touch "$DATABASE"
	fi
}

function print_usage () {
	cat 1>&2 <<__EOF__
usage: git branch-list
   or: git branch-list save  [<branch-name>]
   or: git branch-list drop  [<branch-name>...]
   or: git branch-list clear [<branch-name>]
   or: git branch-list ID

Generic options

    -h                    show this help
    -v                    display version
__EOF__
}

function save_branch () {
	local branch=$(branch_or_current_branch "$1")

	if fgrep --line-regexp "$branch" "$DATABASE" > /dev/null; then
		return 1
	fi

	cat <(echo "$branch") "$DATABASE" > "${DATABASE}.bak"
	mv "${DATABASE}.bak" "$DATABASE"
}

function drop_branch () {
	local branches="$@"
	local branch_names=()

	# If no branch arguments were given, default to the current branch.
	if [ $# -eq 0 ]; then
		branches="$(current_branch)"
	fi

	for branch in $branches; do
		local input="$branch"

		# Assume `$branch` is an ID if it's not a branch name
		if ! is_a_branch "$branch"; then
			branch=$(branch_by_id "$branch")
		fi

		if [ -z "$branch" ]; then
			echo "branch-list: Unrecognised branch '$input'" 1>&2
			exit 1
		fi

		branch_names+=("$branch")
	done

	for branch in "${branch_names[@]}"; do
		fgrep --line-regexp --invert-match "$branch" "$DATABASE" > "$DATABASE.bak"
		mv "${DATABASE}.bak" "$DATABASE"
	done
}

function clear_branches () {
	: > "$DATABASE"
}

function list_branches () {
	nl "$DATABASE"
}

function checkout_branch () {
	local id="$1"
	local branch=$(branch_by_id "$id")

	if [ "$branch" = '' ]; then
		echo 'branch-list: Invalid checkout ID' 1>&2
		return 1
	fi

	git checkout "$branch"
}

function branch_or_current_branch () {
	local branch="$1"

	if [ "$branch" = '' ]; then
		current_branch
	else
		echo "$branch"
	fi
}

function current_branch () {
	git rev-parse --abbrev-ref HEAD
}

function is_a_branch () {
	local branch="$1"

	git rev-parse --verify "$branch" > /dev/null 2>&1
	return
}

function branch_by_id () {
	local id="$1"

	local branch=$(list_branches |
		tr -d ' ' |
		fgrep "$id	" |
		cut -d '	' -f 2)

	echo "$branch"
}

command="$1"

initialise_database

case "$command" in
	-h)
		print_usage

		exit 0
		;;
	-v)
		echo "$VERSION"

		exit 0
		;;
	save)
		save_branch "$2"
		;;
	drop)
		shift
		drop_branch "$@"
		;;
	clear)
		clear_branches
		;;
	"")
		list_branches

		exit
		;;
	*)
		# If `$1` is an integer
		if [ "$1" -eq "$1" ] 2>/dev/null; then
			checkout_branch "$1"
		else
			exit 1
		fi

		;;
esac
